[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 20c9e37..d2e147d 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -77,3 +77,5 @@[m [myarn-error.log[m
 /phpunit.xml[m
 .phpunit.result.cache[m
 ###< phpunit/phpunit ###[m
[32m+[m
[32m+[m[32m.history[m
\ No newline at end of file[m
[1mdiff --git a/assets/css/app.css b/assets/css/app.css[m
[1mindex cb33b13..abddd2f 100644[m
[1m--- a/assets/css/app.css[m
[1m+++ b/assets/css/app.css[m
[36m@@ -1,3 +1,3 @@[m
 body {[m
[31m-    background-color: lightgray;[m
[32m+[m[32m    background-color: #f2f2f2;[m
 }[m
[1mdiff --git a/assets/js/components/Home.js b/assets/js/components/Home.js[m
[1mindex 4affbaa..65b8fe0 100644[m
[1m--- a/assets/js/components/Home.js[m
[1m+++ b/assets/js/components/Home.js[m
[36m@@ -1,32 +1,53 @@[m
 // ./assets/js/components/Home.js[m
 [m
 import React, {Component} from 'react';[m
[31m-import {Route, Redirect, Switch, Link} from 'react-router-dom';[m
[32m+[m[32mimport {Route, Redirect, Switch, Link, withRouter } from 'react-router-dom';[m
 import SetupCheck from "./SetupCheck";[m
[32m+[m[32mimport ExchangeRates from "./ExchangeRates";[m
[32m+[m[32mimport PageNotFound from "./PageNotFound";[m
 [m
 class Home extends Component {[m
 [m
[32m+[m[32m    componentDidMount() {[m
[32m+[m[32m        document.title = "Home - Telemedi Zadanko";[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    componentDidUpdate(prevProps) {[m
[32m+[m[32m        if (this.props.location !== prevProps.location) {[m
[32m+[m[32m            const titles = {[m
[32m+[m[32m                '/': 'Home - Telemedi Zadanko',[m
[32m+[m[32m                '/setup-check': 'Setup Check - Telemedi Zadanko',[m
[32m+[m[32m                '/exchange-rates': 'Exchange rates - Telemedi Zadanko',[m
[32m+[m[32m            };[m
[32m+[m[32m            document.title = titles[this.props.location.pathname] || '404 - not found';[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
     render() {[m
         return ([m
             <div>[m
                 <nav className="navbar navbar-expand-lg navbar-dark bg-dark">[m
[31m-                    <Link className={"navbar-brand"} to={"#"}> Telemedi Zadanko </Link>[m
[32m+[m[32m                    <Link className={"navbar-brand"} to="/"> Telemedi Zadanko </Link>[m
                     <div id="navbarText">[m
                         <ul className="navbar-nav mr-auto">[m
                             <li className="nav-item">[m
                                 <Link className={"nav-link"} to={"/setup-check"}> React Setup Check </Link>[m
                             </li>[m
[31m-[m
[32m+[m[32m                            <li className="nav-item">[m
[32m+[m[32m                                <Link className={"nav-link"} to={"/exchange-rates"}> Exchange rates </Link>[m
[32m+[m[32m                            </li>[m
                         </ul>[m
                     </div>[m
                 </nav>[m
                 <Switch>[m
[31m-                    <Redirect exact from="/" to="/setup-check" />[m
[32m+[m[32m                    <Redirect exact from="/" to="/exchange-rates" />[m
                     <Route path="/setup-check" component={SetupCheck} />[m
[32m+[m[32m                    <Route path="/exchange-rates" component={ExchangeRates} />[m
[32m+[m[32m                    <Route component={PageNotFound} />[m
                 </Switch>[m
             </div>[m
         )[m
     }[m
 }[m
 [m
[31m-export default Home;[m
[32m+[m[32mexport default withRouter(Home);[m
[1mdiff --git a/assets/js/components/SetupCheck.js b/assets/js/components/SetupCheck.js[m
[1mindex 94c4df4..34576a4 100644[m
[1m--- a/assets/js/components/SetupCheck.js[m
[1m+++ b/assets/js/components/SetupCheck.js[m
[36m@@ -2,6 +2,8 @@[m
 [m
 import React, {Component} from 'react';[m
 import axios from 'axios';[m
[32m+[m[32mimport { getBaseUrl } from '../config/config';[m
[32m+[m
 [m
 class SetupCheck extends Component {[m
     constructor() {[m
[36m@@ -9,17 +11,12 @@[m [mclass SetupCheck extends Component {[m
         this.state = { setupCheck: {}, loading: true};[m
     }[m
 [m
[31m-    getBaseUrl() {[m
[31m-        return 'http://telemedi-zadanie.localhost';[m
[31m-    }[m
[31m-[m
     componentDidMount() {[m
         this.checkApiSetup();[m
     }[m
 [m
     checkApiSetup() {[m
[31m-        //const baseUrl = this.getBaseUrl();[m
[31m-        const baseUrl = 'http://telemedi-zadanie.localhost';[m
[32m+[m[32m        const baseUrl = getBaseUrl();[m
         axios.get(baseUrl + `/api/setup-check?testParam=1`).then(response => {[m
             let responseIsOK = response.data && response.data.testParam === 1[m
             this.setState({ setupCheck: responseIsOK, loading: false})[m
[1mdiff --git a/config/routes.yaml b/config/routes.yaml[m
[1mindex 38750d9..89a8fa6 100644[m
[1m--- a/config/routes.yaml[m
[1m+++ b/config/routes.yaml[m
[36m@@ -8,6 +8,11 @@[m [msetupcheck:[m
     path: /api/setup-check[m
     controller: App\Controller\DefaultController::setupCheck[m
 [m
[32m+[m[32mexchange_rates:[m
[32m+[m[32m    path: /api/exchange-rates[m
[32m+[m[32m    controller: App\Controller\ExchangeRatesController::getExchangeRates[m
[32m+[m[32m    methods: GET[m
[32m+[m
 index:[m
     path: /{wildcard}[m
     defaults: {[m
[1mdiff --git a/config/services.yaml b/config/services.yaml[m
[1mindex 469c440..af0376a 100644[m
[1m--- a/config/services.yaml[m
[1m+++ b/config/services.yaml[m
[36m@@ -4,6 +4,7 @@[m
 # Put parameters here that don't need to change on each machine where the app is deployed[m
 # https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration[m
 parameters:[m
[32m+[m[32m    supported_currencies: ['EUR', 'USD', 'CZK', 'IDR', 'BRL'][m
 [m
 services:[m
     # default configuration for services in *this* file[m
[36m@@ -19,6 +20,10 @@[m [mservices:[m
             - '../src/DependencyInjection/'[m
             - '../src/Entity/'[m
 [m
[32m+[m[32m    App\Service\ExchangeRate\ExchangeRatesAPIService:[m
[32m+[m[32m        arguments:[m
[32m+[m[32m            $supportedCurrencies: '%supported_currencies%'[m
[32m+[m
     # controllers are imported separately to make sure services can be injected[m
     # as action arguments even if you don't extend any base controller class[m
     App\Controller\:[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex e67b2b8..0e1d0ce 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -1,5 +1,5 @@[m
 {[m
[31m-    "name": "task_telemedi",[m
[32m+[m[32m    "name": "html",[m
     "lockfileVersion": 3,[m
     "requires": true,[m
     "packages": {[m
[1mdiff --git a/src/App/Controller/DefaultController.php b/src/App/Controller/DefaultController.php[m
[1mindex a4e434d..70b066f 100644[m
[1m--- a/src/App/Controller/DefaultController.php[m
[1m+++ b/src/App/Controller/DefaultController.php[m
[36m@@ -7,6 +7,7 @@[m [mnamespace App\Controller;[m
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;[m
 use Symfony\Component\HttpFoundation\Request;[m
 use Symfony\Component\HttpFoundation\Response;[m
[32m+[m[32muse Symfony\Component\HttpFoundation\JsonResponse;[m
 [m
 [m
 class DefaultController extends AbstractController[m
[36m@@ -19,17 +20,15 @@[m [mclass DefaultController extends AbstractController[m
         );[m
     }[m
 [m
[31m-    public function setupCheck(Request $request): Response[m
[32m+[m[32m    public function setupCheck(Request $request): JsonResponse[m
     {[m
[31m-        $responseContent = json_encode([[m
[32m+[m[32m        $data = [[m
             'testParam' => $request->get('testParam')[m
                 ? (int) $request->get('testParam')[m
                 : null[m
[31m-        ]);[m
[31m-        return new Response([m
[31m-            $responseContent,[m
[31m-            Response::HTTP_OK,[m
[31m-            ['Content-type' => 'application/json'][m
[32m+[m[32m        ];[m
[32m+[m[32m        return new JsonResponse([m
[32m+[m[32m            $data[m
         );[m
     }[m
 [m
[1mdiff --git a/src/App/Controller/ExchangeRatesController.php b/src/App/Controller/ExchangeRatesController.php[m
[1mindex 4853c99..e68a611 100644[m
[1m--- a/src/App/Controller/ExchangeRatesController.php[m
[1m+++ b/src/App/Controller/ExchangeRatesController.php[m
[36m@@ -5,9 +5,62 @@[m [mdeclare(strict_types=1);[m
 namespace App\Controller;[m
 [m
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;[m
[32m+[m[32muse Symfony\Component\HttpFoundation\Request;[m
[32m+[m[32muse Symfony\Component\HttpFoundation\JsonResponse;[m
[32m+[m[32muse App\Service\ExchangeRate\ExchangeRatesAPIService;[m
[32m+[m[32muse App\Service\ExchangeRate\ExchangeRatesService;[m
 [m
[31m-class ExchangeRatesController extends AbstractController[m
[31m-{[m
[32m+[m[32mclass ExchangeRatesController extends AbstractController {[m
[32m+[m[32m    private $exchangeRatesApiService;[m
[32m+[m[32m    private $exchangeRatesService;[m
 [m
[32m+[m[32m    public function __construct(ExchangeRatesAPIService $exchangeRatesApiService,  ExchangeRatesService $exchangeRatesService) {[m
[32m+[m[32m        $this->exchangeRatesApiService = $exchangeRatesApiService;[m
[32m+[m[32m        $this->exchangeRatesService = $exchangeRatesService;[m
[32m+[m[32m    }[m
 [m
[32m+[m[32m    public function getExchangeRates(Request $request): JsonResponse {[m
[32m+[m[32m        $selectedDate = $request->query->get('date') ?? '';[m
[32m+[m[32m        if (date('Y-m-d') === $selectedDate) {[m
[32m+[m[32m            $selectedDate = '';[m
[32m+[m[32m        }[m
[32m+[m[32m        $selectedDateIntance = \DateTime::createFromFormat('Y-m-d', $selectedDate);[m
[32m+[m[32m        if ($selectedDate !== '' && (!$selectedDateIntance || ($selectedDateIntance && $selectedDateIntance->format('Y-m-d') !== $selectedDate))) {[m
[32m+[m[32m            return new JsonResponse(['error' => 'Invalid date format. Expected format: YYYY-mm-dd'], 400);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $now = new \DateTime('now', new \DateTimeZone('Europe/Warsaw'));[m
[32m+[m[32m        $noon = new \DateTime('today 12:00:00', new \DateTimeZone('Europe/Warsaw'));[m
[32m+[m
[32m+[m[32m        $latestDate = ($now > $noon) ? date('Y-m-d') : date('Y-m-d', strtotime('-1 day'));[m
[32m+[m[32m        $ratesApiLatest = $this->exchangeRatesApiService->getExchangeRates($latestDate);[m
[32m+[m[32m        $ratesLatest = $this->exchangeRatesService->processExchangeRates($ratesApiLatest['rates']);[m
[32m+[m
[32m+[m[32m        if ($selectedDate !== '') {[m
[32m+[m[32m            $ratesApiSelected = $this->exchangeRatesApiService->getExchangeRates($selectedDate);[m
[32m+[m[32m            $ratesSelected = $this->exchangeRatesService->processExchangeRates($ratesApiSelected['rates']);[m
[32m+[m[32m            foreach ($ratesLatest as $ind => $r) {[m
[32m+[m[32m                $ratesLatest[$ind]['selected'] = $this->getRateByCode($ratesSelected, $r['code']) ?? null;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $rslt = [[m
[32m+[m[32m            'rates' => $ratesLatest,[m
[32m+[m[32m            'latestDate' => $ratesApiLatest['effectiveDate'],[m
[32m+[m[32m            'isUpdatedToday' => ($now > $noon),[m
[32m+[m[32m            'selectedDate' => $selectedDate[m
[32m+[m[32m        ];[m
[32m+[m[32m        return new JsonResponse($rslt);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    function getRateByCode($rates, $code) {[m
[32m+[m[32m        $result = array_filter($rates, function ($rate) use ($code) {[m
[32m+[m[32m            return $rate['code'] === $code;[m
[32m+[m[32m        });[m
[32m+[m[32m        if (empty($result)) {[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m[32m        return array_values($result)[0];[m
[32m+[m[32m    }[m
 }[m
